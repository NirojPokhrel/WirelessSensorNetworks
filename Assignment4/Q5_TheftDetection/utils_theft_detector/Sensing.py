#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Sensing'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 8

# The Active Message type associated with this message.
AM_TYPE = -1

class Sensing(tinyos.message.Message.Message):
    # Create a new Sensing of size 8.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=8):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Sensing> \n"
        try:
            s += "  [seqno=0x%x]\n" % (self.get_seqno())
        except:
            pass
        try:
            s += "  [pos_x=0x%x]\n" % (self.get_pos_x())
        except:
            pass
        try:
            s += "  [pos_y=0x%x]\n" % (self.get_pos_y())
        except:
            pass
        try:
            if self.get_item_type() == 101 :
                s += "  [item stolen = Gold]"
            else:
                s += "  [Unknown Stolen Item"
           # s += "  [item_type=0x%x]\n" % (self.get_item_type())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: seqno
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'seqno' is signed (False).
    #
    def isSigned_seqno(self):
        return False
    
    #
    # Return whether the field 'seqno' is an array (False).
    #
    def isArray_seqno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seqno'
    #
    def offset_seqno(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'seqno'
    #
    def offsetBits_seqno(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'seqno'
    #
    def get_seqno(self):
        return self.getUIntElement(self.offsetBits_seqno(), 16, 1)
    
    #
    # Set the value of the field 'seqno'
    #
    def set_seqno(self, value):
        self.setUIntElement(self.offsetBits_seqno(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seqno'
    #
    def size_seqno(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'seqno'
    #
    def sizeBits_seqno(self):
        return 16
    
    #
    # Accessor methods for field: pos_x
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'pos_x' is signed (False).
    #
    def isSigned_pos_x(self):
        return False
    
    #
    # Return whether the field 'pos_x' is an array (False).
    #
    def isArray_pos_x(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pos_x'
    #
    def offset_pos_x(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'pos_x'
    #
    def offsetBits_pos_x(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'pos_x'
    #
    def get_pos_x(self):
        return self.getUIntElement(self.offsetBits_pos_x(), 16, 1)
    
    #
    # Set the value of the field 'pos_x'
    #
    def set_pos_x(self, value):
        self.setUIntElement(self.offsetBits_pos_x(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'pos_x'
    #
    def size_pos_x(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'pos_x'
    #
    def sizeBits_pos_x(self):
        return 16
    
    #
    # Accessor methods for field: pos_y
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'pos_y' is signed (False).
    #
    def isSigned_pos_y(self):
        return False
    
    #
    # Return whether the field 'pos_y' is an array (False).
    #
    def isArray_pos_y(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pos_y'
    #
    def offset_pos_y(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'pos_y'
    #
    def offsetBits_pos_y(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'pos_y'
    #
    def get_pos_y(self):
        return self.getUIntElement(self.offsetBits_pos_y(), 16, 1)
    
    #
    # Set the value of the field 'pos_y'
    #
    def set_pos_y(self, value):
        self.setUIntElement(self.offsetBits_pos_y(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'pos_y'
    #
    def size_pos_y(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'pos_y'
    #
    def sizeBits_pos_y(self):
        return 16
    
    #
    # Accessor methods for field: item_type
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'item_type' is signed (False).
    #
    def isSigned_item_type(self):
        return False
    
    #
    # Return whether the field 'item_type' is an array (False).
    #
    def isArray_item_type(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'item_type'
    #
    def offset_item_type(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'item_type'
    #
    def offsetBits_item_type(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'item_type'
    #
    def get_item_type(self):
        return self.getUIntElement(self.offsetBits_item_type(), 16, 1)
    
    #
    # Set the value of the field 'item_type'
    #
    def set_item_type(self, value):
        self.setUIntElement(self.offsetBits_item_type(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'item_type'
    #
    def size_item_type(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'item_type'
    #
    def sizeBits_item_type(self):
        return 16
    
